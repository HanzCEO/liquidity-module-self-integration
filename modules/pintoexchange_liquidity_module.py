from templates.liquidity_module import LiquidityModule, Token
from typing import Dict, Optional
from decimal import Decimal

class PintoExchangeLiquidityModule(LiquidityModule):
    EXP_PRECISION = 1e12

    def _get_indices(
        self,
        tokens: list[Token],
        input_token: Token,
        output_token: Token
    ) -> tuple[int | None, int | None]:
        i = 0
        j = 0
        for idx, token in enumerate(tokens):
            if token.address == input_token.address:
                i = idx
            elif token.address == output_token.address:
                j = idx
            if i != 0 and j != 0:
                break
        if i == 0 or j == 0:
            return None, None
        return i, j

    def _round_up_div(a, b):
        if a == 0:
            return 0
        return (a - 1) / b + 1

    def _layer2_calcReserve(
        self,
        lpTokenSupply: int,
        reserves: list[int],
        j: int
    ):
        resultCPMMCalcReserve = lpTokenSupply ** 2
        resultCPMMCalcReserve = self._round_up_div(resultCPMMCalcReserve, reserves[0 if j == 1 else 1] * self.EXP_PRECISION)
        return resultCPMMCalcReserve
    
    def get_amount_out(
        self, 
        pool_states: Dict, 
        fixed_parameters: Dict,
        input_token: Token, 
        output_token: Token,
        input_amount: int, 
    ) -> tuple[int | None, int | None]:
        """
        cast 4byte-calldata 0x9fbbbeef0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c80000000000000000000000000000000000000000000000008ac7230489e80000
        
        1) "getSwapOut(address,address,uint256)"
        0x4200000000000000000000000000000000000006
        0xb170000aeeFa790fa61D6e837d1035906839a3c8
        10000000000000000000 [1e19]
        """
        tokens = pool_states.get('tokens', [])
        totalSupply = pool_states.get('totalSupply', 0)
        lpTokenSupply = pool_states.get('lpTokenSupply', 0)

        """
        cast call 0x3e11001cfbb6de5737327c59e10afab47b82b5d3 --data 0x9fbbbeef0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c80000000000000000000000000000000000000000000000008ac7230489e80000  --rpc-url https://base.llamarpc.com --trace -vvvv --from 0x77777775c2F5C30868Cf6419392bc667DdD207EC
        Traces:
        [22180] 0x3e11001CfbB6dE5737327c59E10afAB47B82B5d3::getSwapOut(0x4200000000000000000000000000000000000006, 0xb170000aeeFa790fa61D6e837d1035906839a3c8, 10000000000000000000 [1e19])
            ├─ [17278] 0x8cab609400b70eC65973A1Ad4DF63193B82D43c1::getSwapOut(0x4200000000000000000000000000000000000006, 0xb170000aeeFa790fa61D6e837d1035906839a3c8, 10000000000000000000 [1e19]) [delegatecall]
            │   ├─ [14426] 0xBA510990a720725Ab1F9a0D231F045fc906909f4::9fbbbeef(0000000000000000000000004200000000000000000000000000000000000006000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c80000000000000000000000000000000000000000000000008ac7230489e80000ba51aa60b3b8d9a36cc748a62aa56801060183f80000000000000000000000000000000000000000000000000000000000000002ba510c289fd067ebba41335afa11f0591940d6fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c80000000000000000000000004200000000000000000000000000000000000006ba51aaaa66dab6c236b356ad713f759c206dcb9300000000000000000000000000000000000000000000000000000000000001e03ffefd29d6deab9ccdef2300d0c1c903000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000603ffd0000000000000000000000000000000000000000000000000000000000003ffd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003ffd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023ffd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002de) [delegatecall]
            │   │   ├─ [1835] 0xBA510C289fD067EBbA41335afa11F0591940d6fe::calcReserve([149810765960 [1.498e11], 56940145741753783230 [5.694e19]], 0, 2651818091017211274524 [2.651e21], 0x) [staticcall]
            │   │   │   └─ ← [Return] 0x0000000000000000000000000000000000000000000000000000001cc134cea3
            │   │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000006203611e5
            │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000006203611e5
            └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000006203611e5
        """
        i, j = self._get_indices(tokens, input_token, output_token)
        
        if i is None or j is None:
            return None, None
        
        reserves = pool_states.get('reserves', [])
        reserves[i] += input_amount
        # continue: https://basescan.deth.net/address/0xBA510C289fD067EBbA41335afa11F0591940d6fe

        resultCPMMCalcReserve = self._layer2_calcReserve(
            lpTokenSupply,
            reserves,
            j
        )
        substractor = self._calcReserve(
            resultCPMMCalcReserve,
            reserves,
            j,
            totalSupply
        )

        output_amount = reserves[j] - substractor
        
        return 0, output_amount

    def get_amount_in(
        self, 
        pool_state: Dict, 
        fixed_parameters: Dict,
        input_token: Token,
        output_token: Token,
        output_amount: int
    ) -> tuple[int | None, int | None]:
        """
        cast 4byte-calldata 0x1d44458f000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c800000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000de0b6b3a7640000
        
        1) "getSwapIn(address,address,uint256)"
        0xb170000aeeFa790fa61D6e837d1035906839a3c8
        0x4200000000000000000000000000000000000006
        1000000000000000000 [1e18]

        Traces:
        [22198] 0x3e11001CfbB6dE5737327c59E10afAB47B82B5d3::getSwapIn(0xb170000aeeFa790fa61D6e837d1035906839a3c8, 0x4200000000000000000000000000000000000006, 1000000000000000000 [1e18])
            ├─ [17296] 0x8cab609400b70eC65973A1Ad4DF63193B82D43c1::getSwapIn(0xb170000aeeFa790fa61D6e837d1035906839a3c8, 0x4200000000000000000000000000000000000006, 1000000000000000000 [1e18]) [delegatecall]
            │   ├─ [14444] 0xBA510990a720725Ab1F9a0D231F045fc906909f4::1d44458f(000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c800000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000de0b6b3a7640000ba51aa60b3b8d9a36cc748a62aa56801060183f80000000000000000000000000000000000000000000000000000000000000002ba510c289fd067ebba41335afa11f0591940d6fe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b170000aeefa790fa61d6e837d1035906839a3c80000000000000000000000004200000000000000000000000000000000000006ba51aaaa66dab6c236b356ad713f759c206dcb9300000000000000000000000000000000000000000000000000000000000001e03ffefd29d6deab9ccdef2300d0c1c903000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000603ffd0000000000000000000000000000000000000000000000000000000000003ffd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003ffd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023ffd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002de) [delegatecall]
            │   │   ├─ [1835] 0xBA510C289fD067EBbA41335afa11F0591940d6fe::calcReserve([150099058832 [1.5e11], 45849988551340383127 [4.584e19]], 0, 2651818091017211274524 [2.651e21], 0x) [staticcall]
            │   │   │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000023b5ba8f0b
            │   │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000000c320ae7b
            │   └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000000c320ae7b
            └─ ← [Return] 0x00000000000000000000000000000000000000000000000000000000c320ae7b
        """
        tokens = pool_state.get('tokens', [])
        reserves = pool_state.get('reserves', [])
        lpTokenSupply = pool_state.get('lpTokenSupply', 0)
        totalSupply = pool_state.get('totalSupply', 0)

        i, j = self._get_indices(tokens, input_token, output_token)

        reserves[j] -= output_amount

        resultCPMMCalcReserve = self._layer2_calcReserve(
            lpTokenSupply,
            reserves,
            i
        )
        substracted = self._calcReserve(
            resultCPMMCalcReserve,
            reserves,
            i,
            totalSupply
        )
        substractor = reserves[i]
        input_amount = substracted - substractor

        return 0, input_amount


    def get_apy(self, pool_state: Dict) -> Decimal:
        # Implement APY calculation logic
        # latestRoundData()
        # 0xd0fd333f7b30c7925debd81b7b7a4dfe106c3a5e.price()
        pass

    def get_tvl(self, pool_state: Dict, token: Optional[Token] = None) -> Decimal:
        # Implement TVL calculation logic
        # totalSupply()
        pass